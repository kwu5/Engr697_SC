/*  Based on BLEServer example for Arduino ESP32 */
#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <HX711.h>

// generating UUIDs: https://www.uuidgenerator.net/
#define SERVICE_UUID "dc6be25d-905e-4a5c-b1b4-b16645c25d10"
#define CHARACTERISTIC_UUID "d590d568-de2d-11e9-8a34-2a2ae2dbcce4"
#define DOUT  25
#define CLK   26

class HX711 scale;
float calibration_factor = -12450; //-7050 default for 440lb max scale, my calibration values: {-12450.00, , }

void setup() {
  Serial.begin(115200);
  
  Serial.println("Starting Scale");
  scale.begin(DOUT, CLK);
  scale.set_scale();
  scale.tare(); //Reset the scale to 0

  long zero_factor = scale.read_average(); //Get a baseline reading
  Serial.print("Zero factor: "); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.
  Serial.println(zero_factor);
  float scale_val = scale.get_units(20);

  Serial.println("Starting BLE...");
  BLEDevice::init("ESP_SS");
  BLEServer *pServer = BLEDevice::createServer();
  BLEService *pService = pServer->createService(SERVICE_UUID);
  BLECharacteristic *pCharacteristic = pService->createCharacteristic(
      CHARACTERISTIC_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE);

  pCharacteristic->setValue(scale_val);
  pService->start();
  // BLEAdvertising *pAdvertising = pServer->getAdvertising();  // this still is working for backward compatibility
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06); // functions that help with iPhone connections issue
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  Serial.println("Can read characteristic?");
}

void loop() {
  // put your main code here, to run repeatedly:
  delay(2000);
}